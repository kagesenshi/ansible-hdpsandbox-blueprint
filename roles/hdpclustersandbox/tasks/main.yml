---
# tasks file for hdpcluster

- name: set SELinux to permissive
  selinux:
    state: permissive
    policy: targeted

- name: Install EPEL
  yum: 
    name: "{{ packages }}"
  vars:
    packages:
    - epel-release


- name: Install base system packages
  yum: 
    name: "{{ packages }}"
  vars:
    packages:
    - docker
    - python-docker-py
    - python-docker-pycreds
    - python-docker-scripts
    - python-dockerfile-parse
    - cockpit
    - cockpit-ws
    - cockpit-docker
    - cockpit-dashboard
    - ntp
    - ntpdate
    - ansible
    - squid
    - python-requests
    - python2-pyyaml

- name: Setup cockpit
  systemd:
    name: cockpit.socket
    state: started
    enabled: yes

- name: disable firewall
  systemd:
    name: firewalld
    state: stopped
    enabled: no

- name: enable docker
  systemd:
    name: docker
    state: started
    enabled: yes

- name: setup ntpd
  systemd: 
    name: ntpd
    state: started
    enabled: yes

- name: load systemd docker image
  docker_image:
    name: kagesenshi/centos-systemd-sshd
    tag: latest

- name: create docker network
  docker_network:
    name: cluster
    ipam_options:
      subnet: "172.20.10.0/24"
      gateway: "172.20.10.1"

- name: create initial nodes
  docker_container:
    name: "{{ item.name }}"
    domainname: "cluster"
    hostname: "{{ item.name }}"
    image: kagesenshi/centos-systemd-sshd
    privileged: yes
    networks:
      - name: cluster
        ipv4_address: "{{ item.ip }}"
    purge_networks: yes
  with_items:
    - name: edge
      ip: 172.20.10.10
    - name: master1
      ip: 172.20.10.11
    - name: master2
      ip: 172.20.10.12
    - name: master3
      ip: 172.20.10.13
    - name: worker1
      ip: 172.20.10.14
    - name: worker2
      ip: 172.20.10.15

- name: Install hosts file
  copy: 
    src: hosts
    dest: /etc/hosts

- name: install ssh_config file
  copy:
    src: ssh_config
    dest: /etc/ssh/ssh_config
    mode: 0644

- name: setup squid
  systemd:
    name: squid
    state: started
    enabled: yes

- name: copy ambari playbook
  copy:
    src: ambari-playbook.yml
    dest: /root/ambari-playbook.yml

- name: copy docker inventory
  copy:
    src: docker-inventory
    dest: /root/docker-inventory

- name: upload ambari setup files
  copy:
    src: "{{ item }}"
    dest: "/root/{{ item }}"
  with_items:
    - init-ambari.sh
    - ambari-agent.ini
    - deploy-blueprint.py
    - blueprint.yml
    - cluster.yml
    - cert-verification.cfg

- name: deploy ambari
  command:  ansible-playbook -i docker-inventory ambari-playbook.yml
  args:
    chdir: /root
  environment:
    ANSIBLE_GATHER_TIMEOUT: 60

- name: deploy blueprint
  command: python /root/deploy-blueprint.py
  args:
    creates: /root/ambari-cluster-deployed